{
  "openapi": "3.0.3",
  "info": {
    "title": "NeosantaraAI API",
    "description": "NeosantaraAI API - OpenAI Compatible\n\n**Rate Limits**\nEach API KEY has limits based on tier:\n- Free: 10 requests/minute, 100/day, 10,000 tokens/minute, 50,000/day\n- Basic: 50 requests/minute, 500/day, 100,000 tokens/minute, 500,000/day\n- Standard: 60 requests/minute, 2000/day, 100,000 tokens/minute, 1,000,000/day\n- Pro: 120 requests/minute, 10,000/day, 200,000 tokens/minute, 5,000,000/day\n- Enterprise: 200 requests/minute, 50,000/day, 500,000 tokens/minute, 10,000,000/day\n\nLimits apply **per API key** and also **per user** (cumulative).\nIf limits are exceeded, you will receive a 429 error.\nDaily and monthly resets are automatic, with auto-downgrade to Free if subscription expires.\n\nOpenAI-compatible API from NeosantaraAI. Supports endpoints `/v1/chat/completions`, `/v1/completions`, `/v1/models`, `/v1/embeddings`, `/v1/moderations`, `/v1/usage`, `/v1/reasoning`, and others.\n**Auth:** Use header `Authorization: Bearer <API_KEY>`.",
    "version": "5.0.0"
  },
  "servers": [
    {
      "url": "https://api.neosantara.xyz/v1"
    }
  ],
  "security": [
    {
      "apiKey": []
    }
  ],
  "tags": [
    {
      "name": "chat",
      "description": "Chat completion endpoints"
    },
    {
      "name": "completions",
      "description": "Text completion endpoints"
    },
    {
      "name": "embeddings",
      "description": "Text embeddings generation"
    },
    {
      "name": "models",
      "description": "Model information and management"
    },
    {
      "name": "moderations",
      "description": "Content moderation"
    },
    {
      "name": "usage",
      "description": "Usage statistics and monitoring"
    },
    {
      "name": "reasoning",
      "description": "Enhanced reasoning capabilities"
    },
    {
      "name": "system",
      "description": "System status and information"
    }
  ],
  "paths": {
    "/chat/completions": {
      "post": {
        "tags": ["chat"],
        "summary": "Create chat completion",
        "description": "Create chat completion like OpenAI API. Send array of messages (role: user/assistant, content: string).",
        "operationId": "chatCompletions",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatCompletionsRequest"
              },
              "examples": {
                "simple": {
                  "summary": "Simple request example",
                  "value": {
                    "model": "nusantara-base",
                    "messages": [
                      {
                        "role": "user",
                        "content": "What is NeosantaraAI?"
                      }
                    ]
                  }
                },
                "with_system": {
                  "summary": "Request with system message",
                  "value": {
                    "model": "nusantara-base",
                    "messages": [
                      {
                        "role": "system",
                        "content": "You are a helpful AI assistant."
                      },
                      {
                        "role": "user",
                        "content": "Explain machine learning in simple terms."
                      }
                    ],
                    "temperature": 0.7,
                    "max_tokens": 1000
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Chat completion result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatCompletionsResponse"
                },
                "examples": {
                  "success": {
                    "summary": "Successful response example",
                    "value": {
                      "id": "chatcmpl-124",
                      "object": "chat.completion",
                      "created": 1717950000,
                      "model": "nusantara-base",
                      "choices": [
                        {
                          "index": 0,
                          "message": {
                            "role": "assistant",
                            "content": "NeosantaraAI is a local AI platform."
                          },
                          "finish_reason": "stop"
                        }
                      ],
                      "usage": {
                        "prompt_tokens": 12,
                        "completion_tokens": 5,
                        "total_tokens": 17
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "API key missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                },
                "examples": {
                  "auth": {
                    "summary": "API key error example",
                    "value": {
                      "error": {
                        "message": "API key is missing. Please provide your API key in the 'Authorization' header as 'Bearer <API_KEY>'.",
                        "type": "auth_error",
                        "code": "missing_api_key"
                      },
                      "info_metadata": {
                        "creator": "NAIXyz",
                        "status": false,
                        "timestamp": "2025-06-09T16:00:00Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateLimitError"
                },
                "examples": {
                  "limit": {
                    "summary": "Rate limit error example",
                    "value": {
                      "error": {
                        "message": "Too many requests. Limit: 10 RPM. Please try again later.",
                        "type": "rate_limit_exceeded",
                        "code": "rpm_exceeded",
                        "details": {
                          "limit": 10,
                          "remaining": 0,
                          "reset": "2025-06-09T17:00:00Z",
                          "retry_after": 60
                        }
                      },
                      "info_metadata": {
                        "creator": "NAIXyz",
                        "status": false,
                        "timestamp": "2025-06-09T16:00:00Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/completions": {
      "post": {
        "tags": ["completions"],
        "summary": "OpenAI compatible completions (text only)",
        "description": "Create text completions using prompt-based input.",
        "operationId": "textCompletions",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TextCompletionsRequest"
              },
              "examples": {
                "simple": {
                  "summary": "Simple text completion",
                  "value": {
                    "model": "nusantara-base",
                    "prompt": "The future of artificial intelligence is",
                    "max_tokens": 100,
                    "temperature": 0.7
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Text completion result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextCompletionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateLimitError"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/models": {
      "get": {
        "tags": ["models"],
        "summary": "List available models",
        "description": "Retrieve a list of all available models and their capabilities.",
        "operationId": "listModels",
        "responses": {
          "200": {
            "description": "List of available models",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelsListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          }
        }
      }
    },
    "/embeddings": {
      "post": {
        "tags": ["embeddings"],
        "summary": "Create embeddings",
        "description": "Generate vector embeddings from input text.",
        "operationId": "embeddings",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddingsRequest"
              },
              "examples": {
                "simple": {
                  "summary": "Simple embedding request",
                  "value": {
                    "model": "nusa-embeddings-0001",
                    "input": "example sentence"
                  }
                },
                "multiple": {
                  "summary": "Multiple inputs",
                  "value": {
                    "model": "nusa-embeddings-0001",
                    "input": ["first sentence", "second sentence", "third sentence"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Embeddings result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddingsResponse"
                },
                "examples": {
                  "success": {
                    "summary": "Successful embeddings response",
                    "value": {
                      "object": "list",
                      "data": [
                        {
                          "object": "embedding",
                          "embedding": [0.12, 0.34, 0.56],
                          "index": 0
                        }
                      ],
                      "model": "nusa-embeddings-0001",
                      "usage": {
                        "prompt_tokens": 3,
                        "total_tokens": 3
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateLimitError"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/moderations": {
      "post": {
        "tags": ["moderations"],
        "summary": "Content moderation check",
        "description": "Check content for policy violations and harmful content.",
        "operationId": "moderations",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModerationsRequest"
              },
              "examples": {
                "simple": {
                  "summary": "Simple moderation check",
                  "value": {
                    "input": "This is a test message for moderation.",
                    "model": "text-moderation-latest"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Moderation results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModerationsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/usage": {
      "get": {
        "tags": ["usage"],
        "summary": "Get usage statistics",
        "description": "Retrieve detailed usage statistics for your API key.",
        "operationId": "usage",
        "parameters": [
          {
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Start date for usage statistics (YYYY-MM-DD)"
          },
          {
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "End date for usage statistics (YYYY-MM-DD)"
          }
        ],
        "responses": {
          "200": {
            "description": "Usage statistics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          }
        }
      }
    },
    "/reasoning": {
      "post": {
        "tags": ["reasoning"],
        "summary": "Enhanced reasoning completion",
        "description": "Advanced reasoning capabilities with enhanced context understanding.",
        "operationId": "reasoning",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReasoningRequest"
              },
              "examples": {
                "complex_reasoning": {
                  "summary": "Complex reasoning task",
                  "value": {
                    "model": "nusantara-base",
                    "messages": [
                      {
                        "role": "user",
                        "content": "Solve this step by step: If a train travels 120 km in 2 hours, and then 180 km in 3 hours, what is the average speed for the entire journey?"
                      }
                    ],
                    "temperature": 0.3,
                    "max_tokens": 1500
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reasoning completion result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatCompletionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/system/status": {
      "get": {
        "tags": ["system"],
        "summary": "System status and info",
        "description": "Get current system status, your tier information, and usage limits.",
        "operationId": "systemStatus",
        "responses": {
          "200": {
            "description": "System status information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemStatusResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "apiKey": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "API_KEY"
      }
    },
    "schemas": {
      "ChatCompletionsRequest": {
        "type": "object",
        "description": "Request for chat completion.",
        "required": ["model", "messages"],
        "properties": {
          "model": {
            "type": "string",
            "example": "nusantara-base",
            "description": "Model name (required)."
          },
          "messages": {
            "type": "array",
            "description": "Array of messages (role+content).",
            "items": {
              "$ref": "#/components/schemas/ChatMessage"
            }
          },
          "temperature": {
            "type": "number",
            "default": 0.7,
            "minimum": 0,
            "maximum": 2,
            "description": "Sampling temperature between 0 and 2."
          },
          "max_tokens": {
            "type": "integer",
            "default": 1000,
            "minimum": 1,
            "description": "Maximum number of tokens to generate."
          },
          "stream": {
            "type": "boolean",
            "default": false,
            "description": "Whether to stream responses."
          },
          "n": {
            "type": "integer",
            "default": 1,
            "minimum": 1,
            "maximum": 10,
            "description": "Number of completions to generate."
          },
          "top_p": {
            "type": "number",
            "default": 1,
            "minimum": 0,
            "maximum": 1,
            "description": "Nucleus sampling parameter."
          },
          "frequency_penalty": {
            "type": "number",
            "default": 0,
            "minimum": -2,
            "maximum": 2,
            "description": "Frequency penalty parameter."
          },
          "presence_penalty": {
            "type": "number",
            "default": 0,
            "minimum": -2,
            "maximum": 2,
            "description": "Presence penalty parameter."
          },
          "response_format": {
            "$ref": "#/components/schemas/ResponseFormat"
          },
          "functions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Function"
            },
            "description": "Available functions for the model to call."
          },
          "tools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tool"
            },
            "description": "Available tools for the model to use."
          },
          "tool_choice": {
            "oneOf": [
              {"type": "string"},
              {"$ref": "#/components/schemas/ToolChoice"}
            ],
            "default": "auto",
            "description": "Tool choice strategy."
          },
          "web_search": {
            "type": "boolean",
            "default": false,
            "description": "Enable web search capabilities."
          }
        }
      },
      "TextCompletionsRequest": {
        "type": "object",
        "required": ["model", "prompt"],
        "properties": {
          "model": {
            "type": "string",
            "example": "nusantara-base"
          },
          "prompt": {
            "type": "string",
            "description": "Text prompt for completion."
          },
          "temperature": {
            "type": "number",
            "default": 0.7,
            "minimum": 0,
            "maximum": 2
          },
          "max_tokens": {
            "type": "integer",
            "default": 1000,
            "minimum": 1
          },
          "stream": {
            "type": "boolean",
            "default": false
          },
          "n": {
            "type": "integer",
            "default": 1,
            "minimum": 1,
            "maximum": 10
          },
          "top_p": {
            "type": "number",
            "default": 1,
            "minimum": 0,
            "maximum": 1
          },
          "frequency_penalty": {
            "type": "number",
            "default": 0,
            "minimum": -2,
            "maximum": 2
          },
          "presence_penalty": {
            "type": "number",
            "default": 0,
            "minimum": -2,
            "maximum": 2
          },
          "response_format": {
            "$ref": "#/components/schemas/ResponseFormat"
          }
        }
      },
      "ReasoningRequest": {
        "type": "object",
        "required": ["messages"],
        "properties": {
          "model": {
            "type": "string",
            "example": "nusantara-base"
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatMessage"
            }
          },
          "temperature": {
            "type": "number",
            "default": 0.7,
            "minimum": 0,
            "maximum": 2
          },
          "max_tokens": {
            "type": "integer",
            "default": 1500,
            "minimum": 1
          },
          "stream": {
            "type": "boolean",
            "default": false
          },
          "top_p": {
            "type": "number",
            "default": 1,
            "minimum": 0,
            "maximum": 1
          },
          "frequency_penalty": {
            "type": "number",
            "default": 0,
            "minimum": -2,
            "maximum": 2
          },
          "presence_penalty": {
            "type": "number",
            "default": 0,
            "minimum": -2,
            "maximum": 2
          },
          "response_format": {
            "$ref": "#/components/schemas/ResponseFormat"
          }
        }
      },
      "EmbeddingsRequest": {
        "type": "object",
        "description": "Request for embeddings.",
        "required": ["input"],
        "properties": {
          "model": {
            "type": "string",
            "example": "nusa-embeddings-0001",
            "description": "Model to use for embeddings."
          },
          "input": {
            "oneOf": [
              {"type": "string"},
              {
                "type": "array",
                "items": {"type": "string"}
              }
            ],
            "description": "Input text(s) to generate embeddings for."
          },
          "encoding_format": {
            "type": "string",
            "default": "float",
            "enum": ["float", "base64"],
            "description": "Format for the embeddings."
          }
        }
      },
      "ModerationsRequest": {
        "type": "object",
        "required": ["input"],
        "properties": {
          "input": {
            "oneOf": [
              {"type": "string"},
              {
                "type": "array",
                "items": {"type": "string"}
              }
            ],
            "description": "Input text(s) to moderate."
          },
          "model": {
            "type": "string",
            "example": "text-moderation-latest",
            "description": "Moderation model to use."
          }
        }
      },
      "ChatMessage": {
        "type": "object",
        "required": ["role", "content"],
        "properties": {
          "role": {
            "type": "string",
            "enum": ["system", "user", "assistant"],
            "description": "Role of the message sender."
          },
          "content": {
            "type": "string",
            "description": "Content of the message."
          },
          "name": {
            "type": "string",
            "description": "Optional name of the message sender."
          },
          "tool_calls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ToolCall"
            },
            "description": "Tool calls made by the assistant."
          }
        }
      },
      "ResponseFormat": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["text", "json_object"],
            "default": "text",
            "description": "Format of the response."
          }
        }
      },
      "Function": {
        "type": "object",
        "required": ["name", "description"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Function name."
          },
          "description": {
            "type": "string",
            "description": "Function description."
          },
          "parameters": {
            "type": "object",
            "description": "Function parameters schema."
          }
        }
      },
      "Tool": {
        "type": "object",
        "required": ["type"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["function"],
            "description": "Tool type."
          },
          "function": {
            "$ref": "#/components/schemas/Function"
          }
        }
      },
      "ToolChoice": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["function"]
          },
          "function": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              }
            }
          }
        }
      },
      "ToolCall": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["function"]
          },
          "function": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "arguments": {
                "type": "string"
              }
            }
          }
        }
      },
      "ChatCompletionsResponse": {
        "type": "object",
        "description": "Chat completion response.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Completion ID."
          },
          "object": {
            "type": "string",
            "example": "chat.completion",
            "description": "Object type."
          },
          "created": {
            "type": "integer",
            "description": "Creation timestamp."
          },
          "model": {
            "type": "string",
            "description": "Model used."
          },
          "choices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatChoice"
            },
            "description": "Completion choices."
          },
          "usage": {
            "$ref": "#/components/schemas/Usage"
          },
          "info_metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "TextCompletionResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string",
            "example": "text_completion"
          },
          "created": {
            "type": "integer"
          },
          "model": {
            "type": "string"
          },
          "choices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextChoice"
            }
          },
          "usage": {
            "$ref": "#/components/schemas/Usage"
          },
          "info_metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "EmbeddingsResponse": {
        "type": "object",
        "description": "Response from embeddings endpoint.",
        "properties": {
          "object": {
            "type": "string",
            "example": "list"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmbeddingObject"
            }
          },
          "model": {
            "type": "string"
          },
          "usage": {
            "$ref": "#/components/schemas/EmbeddingUsage"
          },
          "info_metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "ModerationsResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModerationResult"
            }
          },
          "info_metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "ModelsListResponse": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "example": "list"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModelInfo"
            }
          },
          "info_metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "UsageResponse": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "example": "usage"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UsageData"
            }
          },
          "total_usage": {
            "type": "integer",
            "description": "Total tokens used in the period."
          },
          "total_requests": {
            "type": "integer",
            "description": "Total requests made in the period."
          },
          "tier_info": {
            "$ref": "#/components/schemas/TierInfo"
          },
          "current_usage": {
            "$ref": "#/components/schemas/CurrentUsage"
          },
          "info_metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "SystemStatusResponse": {
        "type": "object",
        "properties": {
          "system": {
            "$ref": "#/components/schemas/SystemInfo"
          },
          "your_tier": {
            "type": "string",
            "enum": ["free", "basic", "standard", "pro", "enterprise"],
            "description": "Your current subscription tier."
          },
          "your_usage": {
            "$ref": "#/components/schemas/CurrentUsage"
          },
          "info_metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "ChatChoice": {
        "type": "object",
        "properties": {
          "index": {
            "type": "integer"
          },
          "message": {
            "$ref": "#/components/schemas/ChatMessage"
          },
          "finish_reason": {
            "type": "string",
            "enum": ["stop", "length", "function_call", "tool_calls", "content_filter"],
            "description": "Reason for completion finish."
          }
        }
      },
      "TextChoice": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "index": {
            "type": "integer"
          },
          "logprobs": {
            "type": "object",
            "nullable": true,
            "additionalProperties": true
          },
          "finish_reason": {
            "type": "string",
            "enum": ["stop", "length", "content_filter"]
          }
        }
      },
      "EmbeddingObject": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "example": "embedding"
          },
          "embedding": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "Vector embedding values."
          },
          "index": {
            "type": "integer",
            "description": "Index of the input text."
          }
        }
      },
      "ModerationResult": {
        "type": "object",
        "properties": {
          "flagged": {
            "type": "boolean",
            "description": "Whether the content was flagged."
          },
          "categories": {
            "type": "object",
            "properties": {
              "hate": {
                "type": "boolean"
              },
              "hate/threatening": {
                "type": "boolean"
              },
              "harassment": {
                "type": "boolean"
              },
              "harassment/threatening": {
                "type": "boolean"
              },
              "self-harm": {
                "type": "boolean"
              },
              "self-harm/intent": {
                "type": "boolean"
              },
              "self-harm/instructions": {
                "type": "boolean"
              },
              "sexual": {
                "type": "boolean"
              },
              "sexual/minors": {
                "type": "boolean"
              },
              "violence": {
                "type": "boolean"
              },
              "violence/graphic": {
                "type": "boolean"
              }
            },
            "description": "Category flags for different types of harmful content."
          },
          "category_scores": {
            "type": "object",
            "properties": {
              "hate": {
                "type": "number"
              },
              "hate/threatening": {
                "type": "number"
              },
              "harassment": {
                "type": "number"
              },
              "harassment/threatening": {
                "type": "number"
              },
              "self-harm": {
                "type": "number"
              },
              "self-harm/intent": {
                "type": "number"
              },
              "self-harm/instructions": {
                "type": "number"
              },
              "sexual": {
                "type": "number"
              },
              "sexual/minors": {
                "type": "number"
              },
              "violence": {
                "type": "number"
              },
              "violence/graphic": {
                "type": "number"
              }
            },
            "description": "Confidence scores for each category (0-1)."
          }
        }
      },
      "ModelInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Model identifier."
          },
          "object": {
            "type": "string",
            "example": "model"
          },
          "created": {
            "type": "integer",
            "description": "Model creation timestamp."
          },
          "owned_by": {
            "type": "string",
            "example": "NeosantaraAI",
            "description": "Organization that owns the model."
          },
          "permission": {
            "type": "array",
            "items": {
              "type": "object",
              "x-stainless-empty-object": true
            }
          },
          "root": {
            "type": "string",
            "description": "Root model identifier."
          },
          "parent": {
            "type": "string",
            "nullable": true,
            "description": "Parent model identifier."
          },
          "description": {
            "type": "string",
            "description": "Model description."
          },
          "capabilities": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Model capabilities."
          },
          "max_tokens": {
            "type": "integer",
            "description": "Maximum context length."
          },
          "pricing": {
            "$ref": "#/components/schemas/ModelPricing"
          }
        }
      },
      "ModelPricing": {
        "type": "object",
        "properties": {
          "input_tokens": {
            "type": "number",
            "description": "Cost per 1K input tokens."
          },
          "output_tokens": {
            "type": "number",
            "description": "Cost per 1K output tokens."
          },
          "currency": {
            "type": "string",
            "example": "USD"
          }
        }
      },
      "UsageData": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "integer",
            "description": "Usage timestamp."
          },
          "usage": {
            "type": "integer",
            "description": "Token usage."
          },
          "requests": {
            "type": "integer",
            "description": "Number of requests."
          },
          "model": {
            "type": "string",
            "description": "Model used."
          },
          "endpoint": {
            "type": "string",
            "description": "API endpoint used."
          }
        }
      },
      "TierInfo": {
        "type": "object",
        "properties": {
          "tier": {
            "type": "string",
            "enum": ["free", "basic", "standard", "pro", "enterprise"]
          },
          "limits": {
            "$ref": "#/components/schemas/TierLimits"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Tier expiration date."
          }
        }
      },
      "TierLimits": {
        "type": "object",
        "properties": {
          "requests_per_minute": {
            "type": "integer"
          },
          "requests_per_day": {
            "type": "integer"
          },
          "tokens_per_minute": {
            "type": "integer"
          },
          "tokens_per_day": {
            "type": "integer"
          }
        }
      },
      "CurrentUsage": {
        "type": "object",
        "properties": {
          "requests_today": {
            "type": "integer"
          },
          "tokens_today": {
            "type": "integer"
          },
          "requests_this_minute": {
            "type": "integer"
          },
          "tokens_this_minute": {
            "type": "integer"
          },
          "reset_time": {
            "type": "string",
            "format": "date-time",
            "description": "When daily limits reset."
          }
        }
      },
      "SystemInfo": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["operational", "degraded", "maintenance", "down"]
          },
          "version": {
            "type": "string"
          },
          "uptime": {
            "type": "number",
            "description": "System uptime in seconds."
          },
          "region": {
            "type": "string",
            "description": "Server region."
          },
          "last_updated": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Usage": {
        "type": "object",
        "properties": {
          "prompt_tokens": {
            "type": "integer",
            "description": "Tokens in the prompt."
          },
          "completion_tokens": {
            "type": "integer",
            "description": "Tokens in the completion."
          },
          "total_tokens": {
            "type": "integer",
            "description": "Total tokens used."
          }
        }
      },
      "EmbeddingUsage": {
        "type": "object",
        "properties": {
          "prompt_tokens": {
            "type": "integer"
          },
          "total_tokens": {
            "type": "integer"
          }
        }
      },
      "Metadata": {
        "type": "object",
        "properties": {
          "creator": {
            "type": "string",
            "example": "NeosantaraAI"
          },
          "status": {
            "type": "boolean"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "request_id": {
            "type": "string",
            "description": "Unique request identifier."
          },
          "processing_time": {
            "type": "number",
            "description": "Processing time in milliseconds."
          }
        }
      },
      "RateLimitError": {
        "type": "object",
        "description": "Error when rate limit is exceeded.",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": "Error message."
              },
              "type": {
                "type": "string",
                "example": "rate_limit_exceeded"
              },
              "code": {
                "type": "string",
                "example": "rpm_exceeded"
              },
              "details": {
                "type": "object",
                "description": "Additional error details.",
                "properties": {
                  "limit": {
                    "type": "integer",
                    "description": "Rate limit threshold."
                  },
                  "remaining": {
                    "type": "integer",
                    "description": "Remaining requests in the current window."
                  },
                  "reset": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When the rate limit resets."
                  },
                  "retry_after": {
                    "type": "integer",
                    "description": "Seconds to wait before retrying."
                  }
                }
              }
            },
            "required": ["message", "type", "code"]
          },
          "info_metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "AuthError": {
        "type": "object",
        "description": "Error when API key is wrong/missing.",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": "Error message."
              },
              "type": {
                "type": "string",
                "example": "auth_error"
              },
              "code": {
                "type": "string",
                "enum": ["missing_api_key", "invalid_api_key", "expired_api_key"],
                "example": "invalid_api_key"
              }
            },
            "required": ["message", "type", "code"]
          },
          "info_metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "BadRequestError": {
        "type": "object",
        "description": "Error for bad request format or parameters.",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": "Error message."
              },
              "type": {
                "type": "string",
                "example": "bad_request"
              },
              "code": {
                "type": "string",
                "enum": ["invalid_parameter", "missing_parameter", "invalid_format"],
                "example": "invalid_parameter"
              },
              "details": {
                "type": "object",
                "description": "Additional error details."
              }
            },
            "required": ["message", "type", "code"]
          },
          "info_metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "ServerError": {
        "type": "object",
        "description": "Internal server error.",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": "Error message."
              },
              "type": {
                "type": "string",
                "example": "server_error"
              },
              "code": {
                "type": "string",
                "enum": ["internal_error", "service_unavailable", "timeout"],
                "example": "internal_error"
              }
            },
            "required": ["message", "type", "code"]
          },
          "info_metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      }
    }
  }
}