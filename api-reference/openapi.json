{
  "openapi": "3.0.3",
  "info": {
    "title": "NeosantaraAI API",
    "description": "NeosantaraAI API - OpenAI Compatible\n\n**Rate Limits**\nOur rate limiting is token-based. Limits apply **per API key** and also **per user** (cumulative).\nDaily and monthly resets are automatic, with auto-downgrade to Free if subscription expires.\n\nFor detailed tier limits and pricing, please refer to our [Pricing Documentation](https://docs.neosantara.xyz/pricing).\n\n**Available Endpoints:** `/v1/chat/completions`, `/v1/completions`, `/v1/models`, `/v1/embeddings`, `/v1/moderations`, `/v1/reasoning`, `/v1/auth/key` (for API key status), `/get/getkey` (for key generation), `/api/keys` (for key management), `/api/keys/{apiKeyString}` (for key deactivation), `/api/keys/{apiKeyString}/permanent` (for permanent key deletion).\n\n**Auth:** Use header `Authorization: Bearer <API_KEY>` for API calls.\n**Note:** `API_KEY` here refers to the key obtained from `/get/getkey`, not your user login token.",
    "version": "5.0.0"
  },
  "servers": [
    {
      "url": "https://api.neosantara.xyz/v1",
      "description": "Base URL for v1 API endpoints"
    },
    {
      "url": "https://api.neosantara.xyz",
      "description": "Base URL for non-v1 API endpoints (e.g., /api/keys, /get/getkey)"
    }
  ],
  "security": [
    {
      "apiKey": []
    }
  ],
  "tags": [
    {
      "name": "chat",
      "description": "Chat completion endpoints"
    },
    {
      "name": "completions",
      "description": "Text completion endpoints"
    },
    {
      "name": "embeddings",
      "description": "Text embeddings generation"
    },
    {
      "name": "models",
      "description": "Model information and management"
    },
    {
      "name": "moderations",
      "description": "Content moderation"
    },
    {
      "name": "reasoning",
      "description": "Enhanced reasoning capabilities"
    },
    {
      "name": "api_key_management",
      "description": "API Key generation and management for users"
    }
  ],
  "paths": {
    "/chat/completions": {
      "post": {
        "tags": ["chat"],
        "summary": "Create chat completion",
        "description": "Create chat completion like OpenAI API. Send array of messages (role: user/assistant, content: string/array). Supports multimodal input (image_url).",
        "operationId": "chatCompletions",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatCompletionsRequest"
              },
              "examples": {
                "simple": {
                  "summary": "Simple text request example",
                  "value": {
                    "model": "nusantara-base",
                    "messages": [
                      {
                        "role": "user",
                        "content": "What is NeosantaraAI?"
                      }
                    ]
                  }
                },
                "with_system": {
                  "summary": "Request with system message",
                  "value": {
                    "model": "nusantara-base",
                    "messages": [
                      {
                        "role": "system",
                        "content": "You are a helpful AI assistant."
                      },
                      {
                        "role": "user",
                        "content": "Explain machine learning in simple terms."
                      }
                    ],
                    "temperature": 0.7,
                    "max_tokens": 1000
                  }
                },
                "with_image": {
                  "summary": "Request with image input (multimodal)",
                  "value": {
                    "model": "vision-emas-2045",
                    "messages": [
                      {
                        "role": "user",
                        "content": [
                          { "type": "text", "text": "What is in this image?" },
                          { "type": "image_url", "image_url": { "url": "data:image/jpeg;base64,..." } }
                        ]
                      }
                    ]
                  }
                },
                "with_tool_call": {
                  "summary": "Request with tool calling (example)",
                  "value": {
                    "model": "nusantara-base",
                    "messages": [
                      { "role": "user", "content": "What's the weather in Jakarta?" }
                    ],
                    "tools": [
                      {
                        "type": "function",
                        "function": {
                          "name": "get_current_weather",
                          "description": "Gets the current weather in a given location.",
                          "parameters": {
                            "type": "object",
                            "properties": {
                              "location": { "type": "string", "description": "The city name." }
                            },
                            "required": ["location"]
                          }
                        }
                      }
                    ],
                    "tool_choice": "auto"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Chat completion result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatCompletionsResponse"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/AuthError" },
          "429": { "$ref": "#/components/responses/RateLimitError" },
          "500": { "$ref": "#/components/responses/ServerError" }
        }
      }
    },
    "/completions": {
      "post": {
        "tags": ["completions"],
        "summary": "Create text completion (Legacy)",
        "description": "Create text completions using prompt-based input. This endpoint is maintained for legacy compatibility; `/v1/chat/completions` is recommended for new implementations.",
        "operationId": "textCompletions",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TextCompletionsRequest"
              },
              "examples": {
                "simple": {
                  "summary": "Simple text completion",
                  "value": {
                    "model": "nusantara-base",
                    "prompt": "The future of artificial intelligence is",
                    "max_tokens": 100,
                    "temperature": 0.7
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Text completion result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextCompletionResponse"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/AuthError" },
          "429": { "$ref": "#/components/responses/RateLimitError" },
          "500": { "$ref": "#/components/responses/ServerError" }
        }
      }
    },
    "/models": {
      "get": {
        "tags": ["models"],
        "summary": "List available models",
        "description": "Retrieve a list of all available models and their capabilities.",
        "operationId": "listModels",
        "responses": {
          "200": {
            "description": "List of available models",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelsListResponse"
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/AuthError" }
        }
      }
    },
    "/embeddings": {
      "post": {
        "tags": ["embeddings"],
        "summary": "Create embeddings",
        "description": "Generate vector embeddings from input text.",
        "operationId": "embeddings",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddingsRequest"
              },
              "examples": {
                "simple": {
                  "summary": "Simple embedding request",
                  "value": {
                    "model": "nusa-embeddings-0001",
                    "input": "example sentence"
                  }
                },
                "multiple": {
                  "summary": "Multiple inputs",
                  "value": {
                    "model": "nusa-embeddings-0001",
                    "input": ["first sentence", "second sentence", "third sentence"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Embeddings result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddingsResponse"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/AuthError" },
          "429": { "$ref": "#/components/responses/RateLimitError" },
          "500": { "$ref": "#/components/responses/ServerError" }
        }
      }
    },
    "/moderations": {
      "post": {
        "tags": ["moderations"],
        "summary": "Content moderation check",
        "description": "Check content for policy violations and harmful content.",
        "operationId": "moderations",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModerationsRequest"
              },
              "examples": {
                "simple": {
                  "summary": "Simple moderation check",
                  "value": {
                    "input": "This is a test message for moderation.",
                    "model": "text-moderation-latest"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Moderation results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModerationsResponse"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/AuthError" },
          "429": { "$ref": "#/components/responses/RateLimitError" },
          "500": { "$ref": "#/components/responses/ServerError" }
        }
      }
    },
    "/reasoning": {
      "post": {
        "tags": ["reasoning"],
        "summary": "Enhanced reasoning completion",
        "description": "Advanced reasoning capabilities with enhanced context understanding.",
        "operationId": "reasoning",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReasoningRequest"
              },
              "examples": {
                "complex_reasoning": {
                  "summary": "Complex reasoning task",
                  "value": {
                    "model": "nusantara-base",
                    "messages": [
                      {
                        "role": "user",
                        "content": "Solve this step by step: If a train travels 120 km in 2 hours, and then 180 km in 3 hours, what is the average speed for the entire journey?"
                      }
                    ],
                    "temperature": 0.3,
                    "max_tokens": 1500
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reasoning completion result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatCompletionsResponse"
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/AuthError" },
          "429": { "$ref": "#/components/responses/RateLimitError" },
          "500": { "$ref": "#/components/responses/ServerError" }
        }
      }
    },
    "/auth/key": {
      "get": {
        "tags": ["api_key_management"],
        "summary": "Check API Key status",
        "description": "Check the status and remaining usage of your provided API Key.",
        "operationId": "checkApiKeyStatus",
        "responses": {
          "200": {
            "description": "API Key status and usage information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": { "type": "string", "example": "authorization" },
                    "organization": { "type": "string", "example": "org-indonesia-ai" },
                    "permissions": { "type": "array", "items": { "type": "string" } },
                    "authorized": { "type": "boolean" },
                    "created": { "type": "integer" },
                    "expires": { "type": "string", "nullable": true },
                    "id": { "type": "string", "example": "auth-..." },
                    "tier": { "type": "string", "example": "Free" },
                    "usage_info": { "$ref": "#/components/schemas/UsageInfo" },
                    "_metadata": { "$ref": "#/components/schemas/Metadata" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/AuthError" },
          "429": { "$ref": "#/components/responses/RateLimitError" },
          "500": { "$ref": "#/components/responses/ServerError" }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "apiKey": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "API_KEY",
        "description": "Your NeosantaraAI API Key (e.g., nai...)."
      }
    },
    "schemas": {
      "ChatCompletionsRequest": {
        "type": "object",
        "description": "Request for chat completion.",
        "required": ["model", "messages"],
        "properties": {
          "model": {
            "type": "string",
            "example": "nusantara-base",
            "description": "Model name (required)."
          },
          "messages": {
            "type": "array",
            "description": "Array of messages (role+content).",
            "items": {
              "$ref": "#/components/schemas/ChatMessage"
            }
          },
          "temperature": {
            "type": "number",
            "default": 0.7,
            "minimum": 0,
            "maximum": 2,
            "description": "Sampling temperature between 0 and 2."
          },
          "max_tokens": {
            "type": "integer",
            "default": 1000,
            "minimum": 1,
            "description": "Maximum number of tokens to generate."
          },
          "stream": {
            "type": "boolean",
            "default": false,
            "description": "Whether to stream responses."
          },
          "n": {
            "type": "integer",
            "default": 1,
            "minimum": 1,
            "maximum": 10,
            "description": "Number of completions to generate."
          },
          "top_p": {
            "type": "number",
            "default": 1,
            "minimum": 0,
            "maximum": 1,
            "description": "Nucleus sampling parameter."
          },
          "frequency_penalty": {
            "type": "number",
            "default": 0,
            "minimum": -2,
            "maximum": 2,
            "description": "Frequency penalty parameter."
          },
          "presence_penalty": {
            "type": "number",
            "default": 0,
            "minimum": -2,
            "maximum": 2,
            "description": "Presence penalty parameter."
          },
          "response_format": {
            "$ref": "#/components/schemas/ResponseFormat"
          },
          "functions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Function"
            },
            "description": "Available functions for the model to call. (Deprecated: use 'tools' instead)"
          },
          "tools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tool"
            },
            "description": "Available tools for the model to use."
          },
          "tool_choice": {
            "oneOf": [
              {"type": "string"},
              {"$ref": "#/components/schemas/ToolChoice"}
            ],
            "default": "auto",
            "description": "Tool choice strategy."
          },
          "web_search": {
            "type": "boolean",
            "default": false,
            "description": "Enable web search capabilities."
          },
          "enable_reasoning": {
            "type": "boolean",
            "default": false,
            "description": "Enable enhanced step-by-step reasoning for the response."
          },
          "force_lang": {
            "type": "string",
            "enum": ["id", "en"],
            "nullable": true,
            "description": "Force reasoning language (id/en), otherwise detected automatically."
          }
        }
      },
      "TextCompletionsRequest": {
        "type": "object",
        "required": ["model", "prompt"],
        "properties": {
          "model": {
            "type": "string",
            "example": "nusantara-base"
          },
          "prompt": {
            "type": "string",
            "description": "Text prompt for completion."
          },
          "temperature": {
            "type": "number",
            "default": 0.7,
            "minimum": 0,
            "maximum": 2
          },
          "max_tokens": {
            "type": "integer",
            "default": 1000,
            "minimum": 1
          },
          "stream": {
            "type": "boolean",
            "default": false
          },
          "n": {
            "type": "integer",
            "default": 1,
            "minimum": 1,
            "maximum": 10
          },
          "top_p": {
            "type": "number",
            "default": 1,
            "minimum": 0,
            "maximum": 1
          },
          "frequency_penalty": {
            "type": "number",
            "default": 0,
            "minimum": -2,
            "maximum": 2
          },
          "presence_penalty": {
            "type": "number",
            "default": 0,
            "minimum": -2,
            "maximum": 2
          },
          "response_format": {
            "$ref": "#/components/schemas/ResponseFormat"
          }
        }
      },
      "ReasoningRequest": {
        "type": "object",
        "description": "Request for enhanced reasoning completion.",
        "required": ["messages"],
        "properties": {
          "model": {
            "type": "string",
            "example": "nusantara-base"
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatMessage"
            }
          },
          "temperature": {
            "type": "number",
            "default": 0.7,
            "minimum": 0,
            "maximum": 2
          },
          "max_tokens": {
            "type": "integer",
            "default": 1500,
            "minimum": 1
          },
          "stream": {
            "type": "boolean",
            "default": false
          },
          "top_p": {
            "type": "number",
            "default": 1,
            "minimum": 0,
            "maximum": 1
          },
          "frequency_penalty": {
            "type": "number",
            "default": 0,
            "minimum": -2,
            "maximum": 2
          },
          "presence_penalty": {
            "type": "number",
            "default": 0,
            "minimum": -2,
            "maximum": 2
          },
          "response_format": {
            "$ref": "#/components/schemas/ResponseFormat"
          }
        }
      },
      "EmbeddingsRequest": {
        "type": "object",
        "description": "Request for embeddings.",
        "required": ["input"],
        "properties": {
          "model": {
            "type": "string",
            "example": "nusa-embeddings-0001",
            "description": "Model to use for embeddings."
          },
          "input": {
            "oneOf": [
              {"type": "string"},
              {
                "type": "array",
                "items": {"type": "string"}
              }
            ],
            "description": "Input text(s) to generate embeddings for."
          },
          "encoding_format": {
            "type": "string",
            "default": "float",
            "enum": ["float", "base64"],
            "description": "Format for the embeddings."
          }
        }
      },
      "ModerationsRequest": {
        "type": "object",
        "required": ["input"],
        "properties": {
          "input": {
            "oneOf": [
              {"type": "string"},
              {
                "type": "array",
                "items": {"type": "string"}
              }
            ],
            "description": "Input text(s) to moderate."
          },
          "model": {
            "type": "string",
            "example": "text-moderation-latest",
            "description": "Moderation model to use."
          }
        }
      },
      "KTPExtractionResponse": {
        "type": "object",
        "description": "Response schema for KTP data extraction.",
        "properties": {
          "status": { "type": "boolean" },
          "creator": { "type": "string" },
          "result": {
            "type": "object",
            "properties": {
              "nik": { "type": "string", "nullable": true },
              "nama": { "type": "string", "nullable": true },
              "tempat_lahir": { "type": "string", "nullable": true },
              "tgl_lahir": { "type": "string", "format": "date", "example": "DD-MM-YYYY", "nullable": true },
              "jenis_kelamin": { "type": "string", "nullable": true },
              "gol_darah": { "type": "string", "nullable": true },
              "alamat": { "type": "string", "nullable": true },
              "rt_rw": { "type": "string", "nullable": true },
              "kel_desa": { "type": "string", "nullable": true },
              "kecamatan": { "type": "string", "nullable": true },
              "agama": { "type": "string", "nullable": true },
              "status_perkawinan": { "type": "string", "nullable": true },
              "pekerjaan": { "type": "string", "nullable": true },
              "kewarganegaraan": { "type": "string", "nullable": true },
              "berlaku_hingga": { "type": "string", "nullable": true }
            }
          },
          "_metadata": { "$ref": "#/components/schemas/Metadata" }
        }
      },
      "ReceiptExtractionResponse": {
        "type": "object",
        "description": "Response schema for retail receipt data extraction.",
        "properties": {
          "status": { "type": "boolean" },
          "creator": { "type": "string" },
          "result": {
            "type": "object",
            "properties": {
              "nama_toko": { "type": "string", "nullable": true },
              "alamat_toko": { "type": "string", "nullable": true },
              "tanggal": { "type": "string", "format": "date", "example": "YYYY-MM-DD", "nullable": true },
              "items": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "nama": { "type": "string" },
                    "jumlah": { "type": "number" },
                    "harga_satuan": { "type": "number" },
                    "harga_total": { "type": "number" }
                  },
                  "required": ["nama", "jumlah", "harga_satuan", "harga_total"]
                }
              }
            }
          }
        }
      },
      "ChatMessage": {
        "type": "object",
        "required": ["role", "content"],
        "properties": {
          "role": {
            "type": "string",
            "enum": ["system", "user", "assistant", "tool"],
            "description": "Role of the message sender."
          },
          "content": {
            "oneOf": [
              {"type": "string"},
              {"type": "array", "items": {"$ref": "#/components/schemas/ContentPart"}}
            ],
            "description": "Content of the message. Can be a string or an array for multimodal content."
          },
          "name": {
            "type": "string",
            "description": "Optional name of the message sender for tool calls."
          },
          "tool_calls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ToolCall"
            },
            "description": "Tool calls made by the assistant."
          },
          "tool_call_id": {
            "type": "string",
            "description": "The ID of the tool call this message is responding to."
          }
        }
      },
      "ContentPart": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["text", "image_url"] },
          "text": { "type": "string", "description": "Text content." },
          "image_url": { "type": "object", "properties": { "url": { "type": "string", "format": "uri" } } }
        },
        "required": ["type"]
      },
      "ResponseFormat": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["text", "json_object"],
            "default": "text",
            "description": "Format of the response."
          }
        }
      },
      "Function": {
        "type": "object",
        "required": ["name", "description"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Function name."
          },
          "description": {
            "type": "string",
            "description": "Function description."
          },
          "parameters": {
            "type": "object",
            "description": "Function parameters schema (JSON Schema object)."
          }
        }
      },
      "Tool": {
        "type": "object",
        "required": ["type"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["function"],
            "description": "Tool type."
          },
          "function": {
            "$ref": "#/components/schemas/Function"
          }
        }
      },
      "ToolChoice": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["function"]
          },
          "function": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              }
            }
          }
        }
      },
      "ToolCall": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["function"]
          },
          "function": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "arguments": {
                "type": "string"
              }
            }
          }
        }
      },
      "ChatCompletionsResponse": {
        "type": "object",
        "description": "Chat completion response.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Completion ID."
          },
          "object": {
            "type": "string",
            "example": "chat.completion",
            "description": "Object type."
          },
          "created": {
            "type": "integer",
            "description": "Creation timestamp (Unix epoch seconds)."
          },
          "model": {
            "type": "string",
            "description": "Model used."
          },
          "choices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatChoice"
            },
            "description": "Completion choices."
          },
          "usage": {
            "$ref": "#/components/schemas/Usage"
          },
          "_metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "TextCompletionResponse": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "object": { "type": "string", "example": "text_completion" },
          "created": { "type": "integer" },
          "model": { "type": "string" },
          "choices": { "type": "array", "items": { "$ref": "#/components/schemas/TextChoice" } },
          "usage": { "$ref": "#/components/schemas/Usage" },
          "_metadata": { "$ref": "#/components/schemas/Metadata" }
        }
      },
      "EmbeddingsResponse": {
        "type": "object",
        "description": "Response from embeddings endpoint.",
        "properties": {
          "object": { "type": "string", "example": "list" },
          "data": { "type": "array", "items": { "$ref": "#/components/schemas/EmbeddingObject" } },
          "model": { "type": "string" },
          "usage": { "$ref": "#/components/schemas/EmbeddingUsage" },
          "_metadata": { "$ref": "#/components/schemas/Metadata" }
        }
      },
      "ModerationsResponse": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "model": { "type": "string" },
          "results": { "type": "array", "items": { "$ref": "#/components/schemas/ModerationResult" } },
          "_metadata": { "$ref": "#/components/schemas/Metadata" }
        }
      },
      "ModelsListResponse": {
        "type": "object",
        "properties": {
          "object": { "type": "string", "example": "list" },
          "data": { "type": "array", "items": { "$ref": "#/components/schemas/ModelInfo" } },
          "_metadata": { "$ref": "#/components/schemas/Metadata" }
        }
      },
      "SystemStatusResponse": {
        "type": "object",
        "properties": {
          "system": { "$ref": "#/components/schemas/SystemInfo" },
          "your_tier": { "type": "string", "enum": ["free", "basic", "standard", "pro", "enterprise"] },
          "your_usage": { "$ref": "#/components/schemas/UsageInfo" },
          "_metadata": { "$ref": "#/components/schemas/Metadata" }
        }
      },
      "ChatChoice": {
        "type": "object",
        "properties": {
          "index": { "type": "integer" },
          "message": { "$ref": "#/components/schemas/ChatMessage" },
          "finish_reason": { "type": "string", "enum": ["stop", "length", "function_call", "tool_calls", "content_filter"] }
        }
      },
      "TextChoice": {
        "type": "object",
        "properties": {
          "text": { "type": "string" },
          "index": { "type": "integer" },
          "logprobs": { "type": "object", "nullable": true, "additionalProperties": true },
          "finish_reason": { "type": "string", "enum": ["stop", "length", "content_filter"] }
        }
      },
      "EmbeddingObject": {
        "type": "object",
        "properties": {
          "object": { "type": "string", "example": "embedding" },
          "embedding": { "type": "array", "items": { "type": "number" }, "description": "Vector embedding values." },
          "index": { "type": "integer", "description": "Index of the input text." }
        }
      },
      "ModerationResult": {
        "type": "object",
        "properties": {
          "flagged": { "type": "boolean" },
          "categories": {
            "type": "object",
            "properties": {
              "hate": { "type": "boolean" },
              "hate/threatening": { "type": "boolean" },
              "harassment": { "type": "boolean" },
              "harassment/threatening": { "type": "boolean" },
              "self-harm": { "type": "boolean" },
              "self-harm/intent": { "type": "boolean" },
              "self-harm/instructions": { "type": "boolean" },
              "sexual": { "type": "boolean" },
              "sexual/minors": { "type": "boolean" },
              "violence": { "type": "boolean" },
              "violence/graphic": { "type": "boolean" },
              "profanity": { "type": "boolean" }
            },
            "description": "Category flags for different types of harmful content."
          },
          "category_scores": {
            "type": "object",
            "properties": {
              "hate": { "type": "number" },
              "hate/threatening": { "type": "number" },
              "harassment": { "type": "number" },
              "harassment/threatening": { "type": "number" },
              "self-harm": { "type": "number" },
              "self-harm/intent": { "type": "number" },
              "self-harm/instructions": { "type": "number" },
              "sexual": { "type": "number" },
              "sexual/minors": { "type": "number" },
              "violence": { "type": "number" },
              "violence/graphic": { "type": "number" },
              "profanity": { "type": "number" }
            },
            "description": "Confidence scores for each category (0-1)."
          }
        }
      },
      "ModelInfo": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "Model identifier." },
          "object": { "type": "string", "example": "model" },
          "created": { "type": "integer", "description": "Model creation timestamp." },
          "owned_by": { "type": "string", "example": "NeosantaraAI", "description": "Organization that owns the model." },
          "permission": { "type": "array", "items": { "type": "object", "x-stainless-empty-object": true } },
          "root": { "type": "string", "description": "Root model identifier." },
          "parent": { "type": "string", "nullable": true, "description": "Parent model identifier." },
          "description": { "type": "string", "description": "Model description." },
          "capabilities": { "type": "array", "items": { "type": "string" }, "description": "Model capabilities." },
          "max_tokens": { "type": "integer", "description": "Maximum context length." },
          "pricing": { "$ref": "#/components/schemas/ModelPricing" }
        }
      },
      "ModelPricing": {
        "type": "object",
        "properties": {
          "input_tokens": { "type": "number", "description": "Cost per 1K input tokens." },
          "output_tokens": { "type": "number", "description": "Cost per 1K output tokens." },
          "currency": { "type": "string", "example": "USD" }
        }
      },
      "UsageInfo": {
        "type": "object",
        "description": "Detailed usage information for a period (daily or monthly).",
        "properties": {
          "used": { "type": "integer", "description": "Tokens/requests used in the period." },
          "limit": { "type": "integer", "description": "Total tokens/requests allowed in the period." },
          "remaining": { "type": "integer", "description": "Remaining tokens/requests in the period." },
          "reset_at": { "type": "string", "format": "date-time", "description": "When the period resets." }
        },
        "required": ["used", "limit", "remaining", "reset_at"]
      },
      "ApiKey": {
        "type": "object",
        "description": "Details of an API Key associated with a user's account.",
        "properties": {
          "id": { "type": "string", "description": "The unique API Key string identifier (e.g., nai...)." },
          "name": { "type": "string", "description": "A user-defined name for the API Key." },
          "tier": { "type": "string", "description": "The pricing tier associated with this API Key." },
          "created_at": { "type": "string", "format": "date-time", "description": "Timestamp when the API Key was created." },
          "last_used": { "type": "string", "format": "date-time", "nullable": true, "description": "Last time this API Key was used." },
          "is_active": { "type": "boolean", "description": "Whether the API Key is currently active." },
          "usage": {
            "type": "object",
            "properties": {
              "daily": { "$ref": "#/components/schemas/UsagePeriodInfo" },
              "monthly": { "$ref": "#/components/schemas/UsagePeriodInfo" }
            }
          }
        },
        "required": ["id", "name", "tier", "created_at", "is_active", "usage"]
      },
      "Metadata": {
        "type": "object",
        "description": "Standard response metadata.",
        "properties": {
          "creator": { "type": "string", "example": "NeosantaraAI" },
          "status": { "type": "boolean" },
          "timestamp": { "type": "string", "format": "date-time" },
          "request_id": { "type": "string", "description": "Unique request identifier.", "nullable": true },
          "processing_time": { "type": "number", "description": "Processing time in milliseconds.", "nullable": true },
          "tier": { "type": "string", "description": "Tier name.", "nullable": true },
          "user_total_usage": { "$ref": "#/components/schemas/UsageInfo", "description": "Aggregated usage across all user's keys.", "nullable": true },
          "key_specific_usage": { "$ref": "#/components/schemas/UsageInfo", "description": "Usage for the specific API key used.", "nullable": true },
          "is_key_downgraded": { "type": "boolean", "description": "If the API key was downgraded.", "nullable": true },
          "upstash_rate_limiting_active": { "type": "boolean", "description": "If Upstash rate limiting is active.", "nullable": true }
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/BadRequestError" }
          }
        }
      },
      "AuthError": {
        "description": "Authentication failed (API key missing/invalid/expired).",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/AuthError" }
          }
        }
      },
      "RateLimitError": {
        "description": "Rate limit exceeded",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/RateLimitError" }
          }
        }
      },
      "ServerError": {
        "description": "Internal server error.",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/ServerError" }
          }
        }
      }
    }
  }
}
