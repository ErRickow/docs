{
  "openapi": "3.0.3",
  "info": {
    "title": "NeosantaraAI API",
    "description": "NeosantaraAI API - OpenAI Compatible\n\n**Rate Limits**\nOur rate limiting is token-based. Limits apply **per API key** and also **per user** (cumulative).\nDaily and monthly resets are automatic, with auto-downgrade to Free if subscription expires.\n\nFor detailed tier limits and pricing, please refer to our [Pricing Documentation](https://docs.neosantara.xyz/pricing).\n\n**Available Endpoints:** `/v1/chat/completions`, `/v1/completions` (legacy), `/v1/models`, `/v1/embeddings`, `/v1/moderations`, `/v1/reasoning`, and `/v1/auth/key` (API key status).\n\n**Auth:** Use header `Authorization: Bearer <API_KEY>`.",
    "version": "5.0.0"
  },
  "servers": [
    {
      "url": "https://api.neosantara.xyz/v1",
      "description": "Base URL for v1 API endpoints"
    }
  ],
  "security": [
    {
      "apiKey": []
    }
  ],
  "tags": [
    {
      "name": "chat",
      "description": "Chat completion endpoints"
    },
    {
      "name": "completions",
      "description": "Text completion endpoints (Legacy)"
    },
    {
      "name": "embeddings",
      "description": "Text embeddings generation"
    },
    {
      "name": "models",
      "description": "Model information and management"
    },
    {
      "name": "moderations",
      "description": "Content moderation"
    },
    {
      "name": "reasoning",
      "description": "Enhanced reasoning capabilities"
    },
    {
      "name": "authentication",
      "description": "API Key authentication and status"
    }
  ],
  "paths": {
    "/chat/completions": {
      "post": {
        "tags": ["chat"],
        "summary": "Create chat completion",
        "description": "Create chat completion compatible with OpenAI API. Send an array of messages (role: user/assistant, content: string/array). Supports multimodal input (image_url) and tool calling.",
        "operationId": "chatCompletions",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatCompletionsRequest"
              },
              "examples": {
                "simple_text_input": {
                  "summary": "Simple chat completion with text input",
                  "value": {
                    "model": "nusantara-base",
                    "messages": [
                      {
                        "role": "user",
                        "content": "Hello, how are you?"
                      }
                    ]
                  }
                },
                "with_system_message": {
                  "summary": "Chat completion with a system message",
                  "value": {
                    "model": "nusantara-base",
                    "messages": [
                      {
                        "role": "system",
                        "content": "You are a friendly and helpful assistant from NeosantaraAI."
                      },
                      {
                        "role": "user",
                        "content": "Tell me about Indonesian culture."
                      }
                    ],
                    "temperature": 0.7,
                    "max_tokens": 500
                  }
                },
                "multimodal_image_input": {
                  "summary": "Chat completion with image input (multimodal)",
                  "value": {
                    "model": "vision-emas-2045",
                    "messages": [
                      {
                        "role": "user",
                        "content": [
                          { "type": "text", "text": "What do you see in this picture?" },
                          { "type": "image_url", "image_url": { "url": "data:image/jpeg;base64,..." } }
                        ]
                      }
                    ]
                  }
                },
                "tool_calling_example": {
                  "summary": "Chat completion demonstrating tool calling",
                  "value": {
                    "model": "nusantara-base",
                    "messages": [
                      { "role": "user", "content": "What's the current time in Jakarta?" }
                    ],
                    "tools": [
                      {
                        "type": "function",
                        "function": {
                          "name": "get_current_time",
                          "description": "Gets the current time for a specified city.",
                          "parameters": {
                            "type": "object",
                            "properties": {
                              "city": { "type": "string", "description": "The city name (e.g., Jakarta)." }
                            },
                            "required": ["city"]
                          }
                        }
                      }
                    ],
                    "tool_choice": "auto"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Chat completion result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatCompletionsResponse"
                },
                "examples": {
                  "success_response": {
                    "summary": "Successful response example",
                    "value": {
                      "id": "chatcmpl-12345",
                      "object": "chat.completion",
                      "created": 1717950000,
                      "model": "nusantara-base",
                      "choices": [
                        {
                          "index": 0,
                          "message": {
                            "role": "assistant",
                            "content": "NeosantaraAI is an independent AI platform offering various models."
                          },
                          "finish_reason": "stop"
                        }
                      ],
                      "usage": {
                        "prompt_tokens": 15,
                        "completion_tokens": 8,
                        "total_tokens": 23
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/AuthError" },
          "429": { "$ref": "#/components/responses/RateLimitError" },
          "500": { "$ref": "#/components/responses/ServerError" }
        }
      }
    },
    "/completions": {
      "post": {
        "tags": ["completions"],
        "summary": "Create text completion (Legacy)",
        "description": "Create text completions using prompt-based input. This endpoint is maintained for legacy compatibility; `/v1/chat/completions` is recommended for new implementations.",
        "operationId": "textCompletions",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TextCompletionsRequest"
              },
              "examples": {
                "simple_text_prompt": {
                  "summary": "Simple text prompt completion",
                  "value": {
                    "model": "nusantara-base",
                    "prompt": "The future of artificial intelligence is",
                    "max_tokens": 100,
                    "temperature": 0.7
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Text completion result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextCompletionResponse"
                },
                "examples": {
                  "success_response": {
                    "summary": "Successful text completion response",
                    "value": {
                      "id": "cmpl-abc123def456",
                      "object": "text_completion",
                      "created": 1717950000,
                      "model": "nusantara-base",
                      "choices": [
                        {
                          "text": " exciting and full of possibilities.",
                          "index": 0,
                          "logprobs": null,
                          "finish_reason": "length"
                        }
                      ],
                      "usage": {
                        "prompt_tokens": 6,
                        "completion_tokens": 7,
                        "total_tokens": 13
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/AuthError" },
          "429": { "$ref": "#/components/responses/RateLimitError" },
          "500": { "$ref": "#/components/responses/ServerError" }
        }
      }
    },
    "/models": {
      "get": {
        "tags": ["models"],
        "summary": "List available models",
        "description": "Retrieve a list of all available models and their capabilities.",
        "operationId": "listModels",
        "responses": {
          "200": {
            "description": "List of available models",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelsListResponse"
                },
                "examples": {
                  "success_response": {
                    "summary": "Successful models list response",
                    "value": {
                      "object": "list",
                      "data": [
                        {
                          "id": "nusantara-base",
                          "object": "model",
                          "created": 1717950000,
                          "owned_by": "NeosantaraAI",
                          "permission": [],
                          "root": "nusantara-base",
                          "parent": null,
                          "description": "Model dasar untuk tugas umum dengan keseimbangan kinerja dan kecepatan",
                          "capabilities": ["function_calling", "json_mode"]
                        },
                        {
                          "id": "vision-emas-2045",
                          "object": "model",
                          "created": 1717950000,
                          "owned_by": "NeosantaraAI",
                          "permission": [],
                          "root": "vision-emas-2045",
                          "parent": null,
                          "description": "Model visi canggih untuk analisis gambar KTP, struk, dan tugas visual lainnya",
                          "capabilities": ["vision", "json_mode"]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/AuthError" }
        }
      }
    },
    "/embeddings": {
      "post": {
        "tags": ["embeddings"],
        "summary": "Create embeddings",
        "description": "Generate vector embeddings from input text.",
        "operationId": "embeddings",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddingsRequest"
              },
              "examples": {
                "simple_input": {
                  "summary": "Simple embedding request",
                  "value": {
                    "model": "nusa-embeddings-0001",
                    "input": "example sentence"
                  }
                },
                "multiple_inputs": {
                  "summary": "Multiple inputs embedding request",
                  "value": {
                    "model": "nusa-embeddings-0001",
                    "input": ["first sentence", "second sentence", "third sentence"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Embeddings result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddingsResponse"
                },
                "examples": {
                  "success_response": {
                    "summary": "Successful embeddings response",
                    "value": {
                      "object": "list",
                      "data": [
                        {
                          "object": "embedding",
                          "embedding": [0.123, 0.456, 0.789],
                          "index": 0
                        }
                      ],
                      "model": "nusa-embeddings-0001",
                      "usage": {
                        "prompt_tokens": 3,
                        "total_tokens": 3
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/AuthError" },
          "429": { "$ref": "#/components/responses/RateLimitError" },
          "500": { "$ref": "#/components/responses/ServerError" }
        }
      }
    },
    "/moderations": {
      "post": {
        "tags": ["moderations"],
        "summary": "Content moderation check",
        "description": "Check content for policy violations and harmful content.",
        "operationId": "moderations",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModerationsRequest"
              },
              "examples": {
                "simple_check": {
                  "summary": "Simple moderation check",
                  "value": {
                    "input": "This is a test message for moderation.",
                    "model": "text-moderation-latest"
                  }
                },
                "flagged_content": {
                  "summary": "Example of flagged content",
                  "value": {
                    "input": "I want to kill myself.",
                    "model": "text-moderation-latest"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Moderation results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModerationsResponse"
                },
                "examples": {
                  "clean_content": {
                    "summary": "Successful moderation response (clean content)",
                    "value": {
                      "id": "modr-abc123xyz456",
                      "model": "text-moderation-latest",
                      "results": [
                        {
                          "flagged": false,
                          "categories": {
                            "hate": false,
                            "self-harm": false,
                            "sexual": false,
                            "violence": false
                          },
                          "category_scores": {
                            "hate": 0.001,
                            "self-harm": 0.0005,
                            "sexual": 0.0003,
                            "violence": 0.0002
                          }
                        }
                      ]
                    }
                  },
                  "flagged_content_response": {
                    "summary": "Successful moderation response (flagged content)",
                    "value": {
                      "id": "modr-abc123xyz456",
                      "model": "text-moderation-latest",
                      "results": [
                        {
                          "flagged": true,
                          "categories": {
                            "hate": true,
                            "self-harm": true,
                            "sexual": false,
                            "violence": false
                          },
                          "category_scores": {
                            "hate": 0.95,
                            "self-harm": 0.88,
                            "sexual": 0.005,
                            "violence": 0.003
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/AuthError" },
          "429": { "$ref": "#/components/responses/RateLimitError" },
          "500": { "$ref": "#/components/responses/ServerError" }
        }
      }
    },
    "/reasoning": {
      "post": {
        "tags": ["reasoning"],
        "summary": "Enhanced reasoning completion",
        "description": "Advanced reasoning capabilities with enhanced context understanding. This endpoint encourages step-by-step thinking for complex problems.",
        "operationId": "reasoning",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReasoningRequest"
              },
              "examples": {
                "complex_math_problem": {
                  "summary": "Complex reasoning task: Math problem",
                  "value": {
                    "model": "nusantara-base",
                    "messages": [
                      {
                        "role": "user",
                        "content": "A car travels at 60 km/h for 2 hours and then 80 km/h for 3 hours. What is the average speed of the car for the entire journey?"
                      }
                    ],
                    "temperature": 0.3,
                    "max_tokens": 500
                  }
                },
                "logical_reasoning_task": {
                  "summary": "Complex reasoning task: Logical puzzle",
                  "value": {
                    "model": "nusantara-base",
                    "messages": [
                      {
                        "role": "user",
                        "content": "If all A are B, and some B are C, what can we conclude about A and C?"
                      }
                    ],
                    "temperature": 0.3,
                    "max_tokens": 500
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reasoning completion result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatCompletionsResponse"
                },
                "examples": {
                  "reasoning_output": {
                    "summary": "Example reasoning output",
                    "value": {
                      "id": "reasoning-cmpl-123",
                      "object": "chat.completion",
                      "created": 1717950000,
                      "model": "nusantara-base",
                      "choices": [
                        {
                          "index": 0,
                          "message": {
                            "role": "assistant",
                            "content": "First, calculate total distance: 120km + 180km = 300km. Next, calculate total time: 2h + 3h = 5h. Finally, average speed = total distance / total time = 300km / 5h = 60 km/h."
                          },
                          "finish_reason": "stop"
                        }
                      ],
                      "usage": {
                        "prompt_tokens": 30,
                        "completion_tokens": 50,
                        "total_tokens": 80
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/AuthError" },
          "429": { "$ref": "#/components/responses/RateLimitError" },
          "500": { "$ref": "#/components/responses/ServerError" }
        }
      }
    },
    "/auth/key": {
      "get": {
        "tags": ["authentication"],
        "summary": "Check API Key status",
        "description": "Check the status and remaining usage of your provided API Key. This endpoint requires an active NeosantaraAI API Key in the Authorization header. It returns usage information for both the specific API Key and the overall user account.",
        "operationId": "checkApiKeyStatus",
        "responses": {
          "200": {
            "description": "API Key status and usage information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": { "type": "string", "example": "authorization" },
                    "organization": { "type": "string", "example": "org-indonesia-ai" },
                    "permissions": { "type": "array", "items": { "type": "string" } },
                    "authorized": { "type": "boolean" },
                    "created": { "type": "integer" },
                    "expires": { "type": "string", "nullable": true },
                    "id": { "type": "string", "example": "auth-..." },
                    "tier": { "type": "string", "example": "Free" },
                    "usage_info": { "$ref": "#/components/schemas/UsageInfo" },
                    "_metadata": { "$ref": "#/components/schemas/Metadata" }
                  }
                },
                "examples": {
                  "success_response": {
                    "summary": "Example of successful API Key status response",
                    "value": {
                      "object": "authorization",
                      "organization": "org-neosantara-ai",
                      "permissions": ["chat.completions", "embeddings", "moderations"],
                      "authorized": true,
                      "created": 1717950000,
                      "expires": null,
                      "id": "auth-xyz123abc456",
                      "tier": "Free",
                      "usage_info": {
                        "daily": {
                          "used": 1500,
                          "limit": 10000,
                          "remaining": 8500,
                          "reset_at": "2025-06-21T00:00:00Z"
                        },
                        "monthly": {
                          "used": 5000,
                          "limit": 30000,
                          "remaining": 25000,
                          "reset_at": "2025-07-01T00:00:00Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/AuthError" },
          "429": { "$ref": "#/components/responses/RateLimitError" },
          "500": { "$ref": "#/components/responses/ServerError" }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "apiKey": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "API_KEY",
        "description": "Your NeosantaraAI API Key (e.g., nai...)."
      }
    },
    "schemas": {
      "ChatCompletionsRequest": {
        "type": "object",
        "description": "Request for chat completion.",
        "required": ["model", "messages"],
        "properties": {
          "model": {
            "type": "string",
            "example": "nusantara-base",
            "description": "Model name (required)."
          },
          "messages": {
            "type": "array",
            "description": "Array of messages (role+content).",
            "items": {
              "oneOf": [
                { "$ref": "#/components/schemas/TextMessage" },
                { "$ref": "#/components/schemas/ImageMessage" }
              ]
            }
          },
          "temperature": {
            "type": "number",
            "default": 0.7,
            "minimum": 0,
            "maximum": 2,
            "description": "Sampling temperature between 0 and 2."
          },
          "max_tokens": {
            "type": "integer",
            "default": 1000,
            "minimum": 1,
            "description": "Maximum number of tokens to generate."
          },
          "stream": {
            "type": "boolean",
            "default": false,
            "description": "Whether to stream responses."
          },
          "n": {
            "type": "integer",
            "default": 1,
            "minimum": 1,
            "maximum": 10,
            "description": "Number of completions to generate."
          },
          "top_p": {
            "type": "number",
            "default": 1,
            "minimum": 0,
            "maximum": 1,
            "description": "Nucleus sampling parameter."
          },
          "frequency_penalty": {
            "type": "number",
            "default": 0,
            "minimum": -2,
            "maximum": 2,
            "description": "Frequency penalty parameter."
          },
          "presence_penalty": {
            "type": "number",
            "default": 0,
            "minimum": -2,
            "maximum": 2,
            "description": "Presence penalty parameter."
          },
          "response_format": {
            "$ref": "#/components/schemas/ResponseFormat"
          },
          "functions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Function"
            },
            "description": "Available functions for the model to call. (Deprecated: use 'tools' instead)"
          },
          "tools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tool"
            },
            "description": "Available tools for the model to use."
          },
          "tool_choice": {
            "oneOf": [
              {"type": "string"},
              {"$ref": "#/components/schemas/ToolChoice"}
            ],
            "default": "auto",
            "description": "Tool choice strategy."
          },
          "web_search": {
            "type": "boolean",
            "default": false,
            "description": "Enable web search capabilities."
          }
        }
      },
      "TextMessage": {
        "type": "object",
        "required": ["role", "content"],
        "properties": {
          "role": { "type": "string", "enum": ["system", "user", "assistant", "tool"], "description": "Role of the message sender." },
          "content": { "type": "string", "description": "Text content of the message." },
          "name": { "type": "string", "description": "Optional name of the message sender." },
          "tool_call_id": { "type": "string", "description": "The ID of the tool call this message is responding to." }
        }
      },
      "ImageMessage": {
        "type": "object",
        "required": ["type", "image_url"],
        "properties": {
          "type": { "type": "string", "enum": ["image_url"] },
          "image_url": { "type": "object", "properties": { "url": { "type": "string", "format": "uri" } }, "required": ["url"] }
        }
      },
      "TextCompletionsRequest": {
        "type": "object",
        "required": ["model", "prompt"],
        "properties": {
          "model": { "type": "string", "example": "nusantara-base" },
          "prompt": { "type": "string", "description": "Text prompt for completion." },
          "temperature": { "type": "number", "default": 0.7, "minimum": 0, "maximum": 2 },
          "max_tokens": { "type": "integer", "default": 1000, "minimum": 1 },
          "stream": { "type": "boolean", "default": false },
          "n": { "type": "integer", "default": 1, "minimum": 1, "maximum": 10 },
          "top_p": { "type": "number", "default": 1, "minimum": 0, "maximum": 1 },
          "frequency_penalty": { "type": "number", "default": 0, "minimum": -2, "maximum": 2 },
          "presence_penalty": { "type": "number", "default": 0, "minimum": -2, "maximum": 2 },
          "response_format": { "$ref": "#/components/schemas/ResponseFormat" }
        }
      },
      "ReasoningRequest": {
        "type": "object",
        "description": "Request for enhanced reasoning completion.",
        "required": ["messages"],
        "properties": {
          "model": { "type": "string", "example": "nusantara-base" },
          "messages": { "type": "array", "items": { "$ref": "#/components/schemas/ChatMessage" } },
          "temperature": { "type": "number", "default": 0.7, "minimum": 0, "maximum": 2 },
          "max_tokens": { "type": "integer", "default": 1500, "minimum": 1 },
          "stream": { "type": "boolean", "default": false },
          "top_p": { "type": "number", "default": 1, "minimum": 0, "maximum": 1 },
          "frequency_penalty": { "type": "number", "default": 0, "minimum": -2, "maximum": 2 },
          "presence_penalty": { "type": "number", "default": 0, "minimum": -2, "maximum": 2 },
          "response_format": { "$ref": "#/components/schemas/ResponseFormat" }
        }
      },
      "EmbeddingsRequest": {
        "type": "object",
        "description": "Request for embeddings.",
        "required": ["input"],
        "properties": {
          "model": { "type": "string", "example": "nusa-embeddings-0001", "description": "Model to use for embeddings." },
          "input": { "oneOf": [ {"type": "string"}, { "type": "array", "items": {"type": "string"} } ], "description": "Input text(s) to generate embeddings for." },
          "encoding_format": { "type": "string", "default": "float", "enum": ["float", "base64"], "description": "Format for the embeddings." }
        }
      },
      "ModerationsRequest": {
        "type": "object",
        "required": ["input"],
        "properties": {
          "input": { "oneOf": [ {"type": "string"}, { "type": "array", "items": {"type": "string"} } ], "description": "Input text(s) to moderate." },
          "model": { "type": "string", "example": "text-moderation-latest", "description": "Moderation model to use." }
        }
      },
      "ChatCompletionsResponse": {
        "type": "object",
        "description": "Chat completion response.",
        "properties": {
          "id": { "type": "string", "description": "Completion ID." },
          "object": { "type": "string", "example": "chat.completion", "description": "Object type." },
          "created": { "type": "integer", "description": "Creation timestamp (Unix epoch seconds)." },
          "model": { "type": "string", "description": "Model used." },
          "choices": { "type": "array", "items": { "$ref": "#/components/schemas/ChatChoice" }, "description": "Completion choices." },
          "usage": { "$ref": "#/components/schemas/Usage" },
          "_metadata": { "$ref": "#/components/schemas/Metadata" }
        }
      },
      "TextCompletionResponse": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "object": { "type": "string", "example": "text_completion" },
          "created": { "type": "integer" },
          "model": { "type": "string" },
          "choices": { "type": "array", "items": { "$ref": "#/components/schemas/TextChoice" } },
          "usage": { "$ref": "#/components/schemas/Usage" },
          "_metadata": { "$ref": "#/components/schemas/Metadata" }
        }
      },
      "EmbeddingsResponse": {
        "type": "object",
        "description": "Response from embeddings endpoint.",
        "properties": {
          "object": { "type": "string", "example": "list" },
          "data": { "type": "array", "items": { "$ref": "#/components/schemas/EmbeddingObject" } },
          "model": { "type": "string" },
          "usage": { "$ref": "#/components/schemas/EmbeddingUsage" },
          "_metadata": { "$ref": "#/components/schemas/Metadata" }
        }
      },
      "ModerationsResponse": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "model": { "type": "string" },
          "results": { "type": "array", "items": { "$ref": "#/components/schemas/ModerationResult" } },
          "_metadata": { "$ref": "#/components/schemas/Metadata" }
        }
      },
      "ModelsListResponse": {
        "type": "object",
        "properties": {
          "object": { "type": "string", "example": "list" },
          "data": { "type": "array", "items": { "$ref": "#/components/schemas/ModelInfo" } },
          "_metadata": { "$ref": "#/components/schemas/Metadata" }
        }
      },
      "SystemStatusResponse": {
        "type": "object",
        "properties": {
          "system": { "$ref": "#/components/schemas/SystemInfo" },
          "your_tier": { "type": "string", "enum": ["free", "basic", "standard", "pro", "enterprise"] },
          "your_usage": { "$ref": "#/components/schemas/UsageInfo" },
          "_metadata": { "$ref": "#/components/schemas/Metadata" }
        }
      },
      "ChatChoice": {
        "type": "object",
        "properties": {
          "index": { "type": "integer" },
          "message": { "$ref": "#/components/schemas/ChatMessage" },
          "finish_reason": { "type": "string", "enum": ["stop", "length", "function_call", "tool_calls", "content_filter"] }
        }
      },
      "TextChoice": {
        "type": "object",
        "properties": {
          "text": { "type": "string" },
          "index": { "type": "integer" },
          "logprobs": { "type": "object", "nullable": true, "additionalProperties": true },
          "finish_reason": { "type": "string", "enum": ["stop", "length", "content_filter"] }
        }
      },
      "EmbeddingObject": {
        "type": "object",
        "properties": {
          "object": { "type": "string", "example": "embedding" },
          "embedding": { "type": "array", "items": { "type": "number" }, "description": "Vector embedding values." },
          "index": { "type": "integer", "description": "Index of the input text." }
        }
      },
      "ModerationResult": {
        "type": "object",
        "properties": {
          "flagged": { "type": "boolean" },
          "categories": {
            "type": "object",
            "properties": {
              "hate": { "type": "boolean" },
              "hate/threatening": { "type": "boolean" },
              "harassment": { "type": "boolean" },
              "harassment/threatening": { "type": "boolean" },
              "self-harm": { "type": "boolean" },
              "self-harm/intent": { "type": "boolean" },
              "self-harm/instructions": { "type": "boolean" },
              "sexual": { "type": "boolean" },
              "sexual/minors": { "type": "boolean" },
              "violence": { "type": "boolean" },
              "violence/graphic": { "type": "boolean" },
              "profanity": { "type": "boolean" }
            },
            "description": "Category flags for different types of harmful content."
          },
          "category_scores": {
            "type": "object",
            "properties": {
              "hate": { "type": "number" },
              "hate/threatening": { "type": "number" },
              "harassment": { "type": "number" },
              "harassment/threatening": { "type": "number" },
              "self-harm": { "type": "number" },
              "self-harm/intent": { "type": "number" },
              "self-harm/instructions": { "type": "number" },
              "sexual": { "type": "number" },
              "sexual/minors": { "type": "number" },
              "violence": { "type": "number" },
              "violence/graphic": { "type": "number" },
              "profanity": { "type": "number" }
            },
            "description": "Confidence scores for each category (0-1)."
          }
        }
      },
      "ModelInfo": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "Model identifier." },
          "object": { "type": "string", "example": "model" },
          "created": { "type": "integer", "description": "Model creation timestamp." },
          "owned_by": { "type": "string", "example": "NeosantaraAI", "description": "Organization that owns the model." },
          "permission": { "type": "array", "items": { "type": "object", "x-stainless-empty-object": true } },
          "root": { "type": "string", "description": "Root model identifier." },
          "parent": { "type": "string", "nullable": true, "description": "Parent model identifier." },
          "description": { "type": "string", "description": "Model description." },
          "capabilities": { "type": "array", "items": { "type": "string" }, "description": "Model capabilities." },
          "max_tokens": { "type": "integer", "description": "Maximum context length." },
          "pricing": { "$ref": "#/components/schemas/ModelPricing" }
        }
      },
      "ModelPricing": {
        "type": "object",
        "properties": {
          "input_tokens": { "type": "number", "description": "Cost per 1K input tokens." },
          "output_tokens": { "type": "number", "description": "Cost per 1K output tokens." },
          "currency": { "type": "string", "example": "USD" }
        }
      },
      "UsageInfo": {
        "type": "object",
        "description": "Detailed usage information for a period (daily or monthly).",
        "properties": {
          "used": { "type": "integer", "description": "Tokens/requests used in the period." },
          "limit": { "type": "integer", "description": "Total tokens/requests allowed in the period." },
          "remaining": { "type": "integer", "description": "Remaining tokens/requests in the period." },
          "reset_at": { "type": "string", "format": "date-time", "description": "When the period resets." }
        },
        "required": ["used", "limit", "remaining", "reset_at"]
      },
      "ApiKey": {
        "type": "object",
        "description": "Details of an API Key associated with a user's account.",
        "properties": {
          "id": { "type": "string", "description": "The unique API Key string identifier (e.g., nai...)." },
          "name": { "type": "string", "description": "A user-defined name for the API Key." },
          "tier": { "type": "string", "description": "The pricing tier associated with this API Key." },
          "created_at": { "type": "string", "format": "date-time", "description": "Timestamp when the API Key was created." },
          "last_used": { "type": "string", "format": "date-time", "nullable": true, "description": "Last time this API Key was used." },
          "is_active": { "type": "boolean", "description": "Whether the API Key is currently active." },
          "usage": {
            "type": "object",
            "properties": {
              "daily": { "$ref": "#/components/schemas/UsagePeriodInfo" },
              "monthly": { "$ref": "#/components/schemas/UsagePeriodInfo" }
            }
          }
        },
        "required": ["id", "name", "tier", "created_at", "is_active", "usage"]
      },
      "Metadata": {
        "type": "object",
        "description": "Standard response metadata.",
        "properties": {
          "creator": { "type": "string", "example": "NeosantaraAI" },
          "status": { "type": "boolean" },
          "timestamp": { "type": "string", "format": "date-time" },
          "request_id": { "type": "string", "description": "Unique request identifier.", "nullable": true },
          "processing_time": { "type": "number", "description": "Processing time in milliseconds.", "nullable": true },
          "tier": { "type": "string", "description": "Tier name.", "nullable": true },
          "user_total_usage": { "$ref": "#/components/schemas/UsageInfo", "description": "Aggregated usage across all user's keys.", "nullable": true },
          "key_specific_usage": { "$ref": "#/components/schemas/UsageInfo", "description": "Usage for the specific API key used.", "nullable": true },
          "is_key_downgraded": { "type": "boolean", "description": "If the API key was downgraded.", "nullable": true },
          "upstash_rate_limiting_active": { "type": "boolean", "description": "If Upstash rate limiting is active.", "nullable": true }
        }
      },
      "BadRequestError": {
        "type": "object",
        "description": "Error for bad request format or parameters.",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "message": { "type": "string" },
              "type": { "type": "string", "example": "invalid_request_error" },
              "code": { "type": "string", "enum": ["invalid_parameter", "missing_parameter", "invalid_format", "invalid_messages"], "example": "invalid_parameter" },
              "param": { "type": "string", "description": "Parameter that caused the error.", "nullable": true },
              "details": { "type": "object", "description": "Additional error details.", "additionalProperties": true, "nullable": true }
            },
            "required": ["message", "type", "code"]
          },
          "info_metadata": { "$ref": "#/components/schemas/Metadata" }
        }
      },
      "AuthError": {
        "type": "object",
        "description": "Error when authentication fails (API key missing/invalid/expired).",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "message": { "type": "string" },
              "type": { "type": "string", "example": "auth_error" },
              "code": { "type": "string", "enum": ["missing_api_key", "invalid_api_key", "token_expired", "session_expired", "invalid_token"], "example": "invalid_api_key" },
              "details": { "type": "object", "description": "Additional error details.", "additionalProperties": true, "nullable": true }
            },
            "required": ["message", "type", "code"]
          },
          "info_metadata": { "$ref": "#/components/schemas/Metadata" }
        }
      },
      "RateLimitError": {
        "type": "object",
        "description": "Error when rate limit is exceeded.",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "message": { "type": "string" },
              "type": { "type": "string", "example": "rate_limit_exceeded" },
              "code": { "type": "string", "enum": ["rpm_exceeded", "tpm_exceeded", "user_total_daily_limit_exceeded", "user_total_monthly_limit_exceeded"], "example": "rpm_exceeded" },
              "details": { "$ref": "#/components/schemas/RateLimitDetails", "nullable": true }
            },
            "required": ["message", "type", "code"]
          },
          "info_metadata": { "$ref": "#/components/schemas/Metadata" }
        }
      },
      "RateLimitDetails": {
        "type": "object",
        "properties": {
          "limit": { "type": "integer", "description": "Rate limit threshold." },
          "remaining": { "type": "integer", "description": "Remaining requests/tokens in the current window." },
          "reset": { "type": "string", "format": "date-time", "description": "When the rate limit resets." },
          "retry_after": { "type": "integer", "description": "Seconds to wait before retrying.", "nullable": true }
        }
      },
      "ServerError": {
        "type": "object",
        "description": "Internal server error.",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "message": { "type": "string" },
              "type": { "type": "string", "example": "server_error" },
              "code": { "type": "string", "enum": ["internal_error", "service_unavailable", "timeout"], "example": "internal_error" },
              "details": { "type": "object", "description": "Additional error details.", "additionalProperties": true, "nullable": true }
            },
            "required": ["message", "type", "code"]
          },
          "info_metadata": { "$ref": "#/components/schemas/Metadata" }
        }
      },
      "UsagePeriodInfo": {
        "type": "object",
        "properties": {
          "used": { "type": "integer", "description": "Tokens/requests used in the period." },
          "limit": { "type": "integer", "description": "Total tokens/requests allowed in the period." },
          "remaining": { "type": "integer", "description": "Remaining tokens/requests in the period." },
          "reset_at": { "type": "string", "format": "date-time", "description": "When the period resets." }
        },
        "required": ["used", "limit", "remaining", "reset_at"]
      },
      "Usage": {
        "type": "object",
        "description": "Token usage for a single completion.",
        "properties": {
          "prompt_tokens": { "type": "integer", "description": "Tokens in the prompt." },
          "completion_tokens": { "type": "integer", "description": "Tokens in the completion." },
          "total_tokens": { "type": "integer", "description": "Total tokens used." }
        },
        "required": ["prompt_tokens", "completion_tokens", "total_tokens"]
      },
      "EmbeddingUsage": {
        "type": "object",
        "description": "Token usage for embeddings.",
        "properties": {
          "prompt_tokens": { "type": "integer" },
          "total_tokens": { "type": "integer" }
        },
        "required": ["prompt_tokens", "total_tokens"]
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/BadRequestError" }
          }
        }
      },
      "AuthError": {
        "description": "Authentication failed (API key missing/invalid/expired).",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/AuthError" }
          }
        }
      },
      "RateLimitError": {
        "description": "Rate limit exceeded",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/RateLimitError" }
          }
        }
      },
      "ServerError": {
        "description": "Internal server error.",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/ServerError" }
          }
        }
      }
    }
  }
}
